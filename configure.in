dnl configure.in for cvs
m4_define([AC_PACKAGE_VERSION], esyscmd(echo -n `sed -n 's/^.*CVSNT_PRODUCT_MAJOR[[ \\t]]*\\([[0-9]]*\\)/\\1/p' version_no.h`.`sed -n 's/^.*CVSNT_PRODUCT_MINOR[[ \\t]]*\\([[0-9]]*\\)/\1/p' version_no.h`.`sed -n 's/^.*CVSNT_PRODUCT_PATCHLEVEL[[ \\t]]*\\([[0-9]]*\\)/\1/p' version_no.h`))
m4_define([AC_PACKAGE_STRING], [cvsnt AC_PACKAGE_VERSION])
AC_INIT(cvsnt, 0, tmh@cvsnt.org)
AM_INIT_AUTOMAKE(cvsnt, $PACKAGE_NAME, $PACKAGE_VERSION)
AC_PREREQ(2.13)
AM_CONFIG_HEADER(config.h src/options.h)
AC_CONFIG_SRCDIR(config.h.in)
AM_MAINTAINER_MODE

AC_PROG_AWK
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_YACC
AC_PROG_LN_S
AC_LIBLTDL_INSTALLABLE
AC_LIBTOOL_DLOPEN
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AC_CONFIG_SUBDIRS(libltdl)
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

AC_PATH_PROG(PERL, perl, no)
AC_PATH_PROG(CSH, csh, no)
AC_PATH_PROG(PR, pr, no)
# For diff/util.c
if test x"$PR" != xno; then
	AC_DEFINE_UNQUOTED([PR_PROGRAM], ["$PR"], [Path to the pr utility])
fi

# FHS isn't really compatible with GNU, but we prefer FHS generally since the
# primary target is Linux - also many linux distros don't even *have* a /usr/etc
#
if test "$prefix" = "/usr" -o "$prefix" = "NONE"; then
  if test "$sysconfdir" = "\${prefix}/etc"; then
     sysconfdir="/etc"
  fi
fi

dnl FIXME This is truly gross.
missing_dir=`cd $ac_aux_dir && pwd`
dnl FIXME I pulled this default list from sanity.sh.  Perhaps these lists
dnl can be stored in one location?
glocs="$PATH:/usr/local/bin:/usr/contrib/bin:/usr/gnu/bin:/local/bin:/local/gnu/bin:/gnu/bin"
AC_PATH_PROGS(ROFF, groff roff, $missing_dir/missing roff, $glocs)
AC_PATH_PROG(PS2PDF, ps2pdf, $missing_dir/missing ps2pdf)
AC_PATH_PROG(TEXI2DVI, texi2dvi, $missing_dir/missing texi2dvi)

AC_SYS_INTERPRETER
if test X"$ac_cv_sys_interpreter" != X"yes" ; then
  # silly trick to avoid problems in AC macros...
  ac_msg='perl scripts using #! may not be invoked properly'
  AC_MSG_WARN($ac_msg)
fi

# BSD's logo is a devil for a reason, hey?
AC_CACHE_CHECK(for BSD VPATH bug in make, ccvs_cv_bsd_make_vpath_bug,
[if test ! -d ac_test_dir ; then
	AC_TRY_COMMAND([mkdir ac_test_dir])
fi
cat >conftestmake <<EOF
VPATH = ac_test_dir
ac_test_target: ac_test_dep
	echo BSD VPATH bug present >&2
ac_test_dep: ac_test_dep_dep
EOF
touch ac_test_dir/ac_test_dep_dep
touch ac_test_dir/ac_test_dep
touch ac_test_target
# Don't know why, but the following test doesn't work under FreeBSD 4.2
# without this sleep command
sleep 1
if AC_TRY_COMMAND([make -f conftestmake 2>&1 >/dev/null |grep ^BSD\ VPATH\ bug\ present\$ >/dev/null]) ; then
	ccvs_cv_bsd_make_vpath_bug=yes
else
	ccvs_cv_bsd_make_vpath_bug=no
fi
AC_TRY_COMMAND([rm -rf ac_test_dir ac_test_target conftestmake])])
# We also don't need to worry about the bug when $srcdir = $builddir
AM_CONDITIONAL(MAKE_TARGETS_IN_VPATH, \
		test $ccvs_cv_bsd_make_vpath_bug = no \
		|| test $srcdir = .)

AC_ISC_POSIX
if test "$ISC" = yes; then
CFLAGS="$CFLAGS -D_SYSV3"
LIBS="-lcrypt $LIBS"
fi

AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(errno.h unistd.h string.h memory.h utime.h fcntl.h ndbm.h \
		 limits.h sys/file.h grp.h stdio.h stdarg.h sys/un.h \
                 sys/param.h sys/select.h sys/time.h sys/timeb.h sys/socket.h \
                 io.h direct.h sys/bsdtypes.h sys/resource.h syslog.h glob.h \
		 paths.h)
AC_HEADER_STAT
AC_HEADER_TIME

AC_CHECK_SIZEOF(int,cross)
AC_CHECK_SIZEOF(long,cross)
AC_CHECK_SIZEOF(short,cross)

AC_TYPE_SIGNAL
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_STRUCT_ST_RDEV
AC_STRUCT_ST_BLKSIZE
AC_CHECK_TYPE(ino_t,unsigned)
AC_CHECK_TYPE(loff_t,off_t)
AC_SYS_LARGEFILE

AC_CHECK_LIB(socket,getaddrinfo)

AC_REPLACE_FUNCS(mkdir rename strstr dup2 strerror valloc waitpid memmove strtoul getaddrinfo getnameinfo inet_aton daemon)
AC_CHECK_FUNCS(\
	fchdir \
	fchmod \
	fsync \
	ftime \
	ftruncate \
	getgroups \
	getpagesize \
	getpassphrase \
	gettimeofday \
	initgroups \
	mknod \
	mkstemp \
	mktemp \
	putenv \
	readlink \
	sigaction \
	sigblock \
	sigprocmask \
	sigsetmask \
	sigvec \
	snprintf \
	tempnam \
	timezone \
	tzset \
	vprintf \
	wait3 \
	strdup \
	getaddrinfo \
	inet_aton \
	memchr \
	strchr 
)
# we only need one of the following
AC_CHECK_FUNCS([\
	nanosleep \
	usleep \
	select \
], [break])

AC_CHECK_FUNCS(fseeko,[AC_DEFINE(CVS_FSEEK,fseeko,[Define to OS specific seek routine])],[AC_DEFINE(CVS_FSEEK,fseek)])
AC_CHECK_FUNCS(ftello,[AC_DEFINE(CVS_FTELL,ftello,[Define to OS specific tell routine])],[AC_DEFINE(CVS_FTELL,ftell)])


dnl
dnl Force lib/regex.c to use malloc instead of messing around with alloca
dnl and define the old re_comp routines that we use.
dnl
AC_DEFINE(REGEX_MALLOC,[],[Define to force lib/regex.c to use malloc instead of alloca.])
AC_DEFINE(_REGEX_RE_COMP,[],[Define to force lib/regex.c to define re_comp et al.])
dnl
dnl AC_FUNC_VFORK is rather baroque.  It seems to be rather more picky
dnl than, say, the Single Unix Specification (version 2), which simplifies
dnl a lot of cases by saying that the child process can't set any variables
dnl (thus avoiding problems with register allocation) or call any functions
dnl (thus avoiding problems with whether file descriptors are shared).
dnl It would be nice if we could just write to the Single Unix Specification.
dnl I think the only way to do redirection this way is by doing it in the
dnl parent, and then undoing it afterwards (analogous to windows-NT/run.c).
dnl That would appear to have a race condition if the user hits ^C (or
dnl some other signal) at the wrong time, as main_cleanup will try to use
dnl stdout/stderr.  So maybe we are stuck with AC_FUNC_VFORK.
dnl
AC_FUNC_VFORK
AC_FUNC_CLOSEDIR_VOID

dnl
dnl Check for shadow password support.
dnl
dnl We used to try to determine whether shadow passwords were actually in
dnl use or not, but the code has been changed to work right reguardless,
dnl so we can go back to a simple check.
AC_SEARCH_LIBS(getspnam, sec gen, AC_DEFINE(HAVE_GETSPNAM,[],[Define if getspnam is supported]))

AC_FUNC_UTIME_NULL
AC_SYS_LONG_FILE_NAMES

AC_FUNC_FNMATCH
if test "$ac_cv_func_fnmatch_works" = no; then
  AC_LIBOBJ(fnmatch)
fi

# Try to find connect and gethostbyname.
AC_CHECK_LIB(nsl, main,
  AC_SEARCH_LIBS(connect, xnet socket inet, AC_DEFINE(HAVE_CONNECT,[],[Define if connect is supported]),, -lnsl),
  AC_SEARCH_LIBS(connect, xnet socket inet, AC_DEFINE(HAVE_CONNECT,[],[Define if ocnnect is supported])))
AC_SEARCH_LIBS(gethostbyname, netinet nsl)

AC_SEARCH_LIBS(dlopen,dl c)
AC_SEARCH_LIBS(zlibVersion, z, [AC_MSG_CHECKING([for zlib])
     AC_TRY_LINK([#include <zlib.h>],[int i;],[ac_cv_have_zlib="yes"])
     AC_MSG_RESULT($ac_cv_have_zlib)], ac_cv_have_zlib="no")
AM_CONDITIONAL(WITH_ZLIB, test "$ac_cv_have_zlib" = "yes")

AC_SEARCH_LIBS(SSL_CTX_new, ssl ssleay32, [AC_MSG_CHECKING([for openssl])
     AC_TRY_LINK([#include <openssl/ssl.h>],[int i;],[ac_cv_have_ssl="yes"])
     AC_MSG_RESULT($ac_cv_have_ssl)], ac_cv_have_ssl="no")
AC_SEARCH_LIBS(ERR_get_error,crypto libeay32)

AC_CHECK_FUNC(gethostname, ,[AC_LIBOBJ([hostname])])

AC_SEARCH_LIBS(crypt, crypt, AC_DEFINE(HAVE_CRYPT,[],[Define if crypt is supported]))

ACX_WITH_GSSAPI

dnl On cygwin32, we configure like a Unix system, but we use the
dnl Windows support code in lib/fncase.c to handle the case
dnl insensitive file system.  We also need some support libraries.  We
dnl do this at the end so that the new libraries are added at the end
dnl of LIBS.
AC_CACHE_CHECK(for cygwin32, ccvs_cv_sys_cygwin32,
[AC_TRY_COMPILE([], [return __CYGWIN32__;],
ccvs_cv_sys_cygwin32=yes, ccvs_cv_sys_cygwin32=no)])
if test $ccvs_cv_sys_cygwin32 = yes; then
  AC_LIBOBJ(fncase) 
  LIBS="$LIBS -ladvapi32"

  dnl On Windows you can only change file times if you can write to
  dnl the file.  cygwin32 should really handle this for us, but as of
  dnl January 1998 it doesn't.
  AC_DEFINE(UTIME_EXPECTS_WRITABLE,[],[Define if utime requires write access to the file.])

  dnl On Windows we must use setmode to change between binary and text
  dnl mode.
  AC_DEFINE(USE_SETMODE_STDOUT,[],[Define if setmode is required when writing binary data to stdout.])
  AC_DEFINE(HAVE_SETMODE,[],[Define if setmode is supported])
fi

AC_ARG_WITH(config_dir, 
[  --with-config-dir=DIRECTORY
                           Directory for config files (default SYSCONFDIR/cvsnt)],
AC_DEFINE_UNQUOTED(CVS_CONFIG_DIR,$withval,[Directory to search for config files])
cvs_config_dir=$withval,
AC_DEFINE_DIR(CVS_CONFIG_DIR,"${sysconfdir}/cvsnt")
cvs_config_dir="${sysconfdir}/cvsnt")
AC_SUBST(cvs_config_dir)

AC_ARG_WITH(protocol_dir, 
[  --with-protocol-dir=DIRECTORY
                           Directory for protocol libraries (default LIBDIR/cvsnt)],
AC_DEFINE_UNQUOTED(CVS_LIBRARY_DIR,$withval,[Directory to search for protocol libraries])
cvs_library_dir=$withval,
AC_DEFINE_DIR(CVS_LIBRARY_DIR,"${libdir}/cvsnt")
cvs_library_dir="${libdir}/cvsnt")
AC_SUBST(cvs_library_dir)

AC_MSG_CHECKING(support for client)
# Check for options requesting client and server feature. If none are
# given and we have connect(), we want the full client & server arrangement.
AC_ARG_ENABLE(client,
[  --enable-client         include code for running as a remote client (default)
  --disable-client        don't include remote client code],
[if test "$enable_client" = yes; then
  AC_DEFINE(CLIENT_SUPPORT,[],[Support CVS remote client])
fi],
[if test "$ac_cv_search_connect" != no; then
  AC_DEFINE(CLIENT_SUPPORT,[],[Support CVS remote client])
  enable_client="yes"
fi])
AC_MSG_RESULT($enable_client)

AC_MSG_CHECKING(support for server)
AC_ARG_ENABLE(server,
[  --enable-server         include code for running as a server (default)
  --disable-server        don't include server code],
[if test "$enable_server" = yes; then
  AC_DEFINE(SERVER_SUPPORT,[],[Support CVS remote server])
fi],
[if test "$ac_cv_search_connect" != no; then
  AC_DEFINE(SERVER_SUPPORT,[],[Support CVS remote server])
  enable_server="yes"
fi])
AC_MSG_RESULT($enable_server)
AM_CONDITIONAL(INSTALL_SERVER, test "$enable_server" = "yes")

AC_MSG_CHECKING(support for lockserver)
AC_ARG_ENABLE(lockserver,
[  --enable-lockserver     compile lockserver daemon (default)
  --disable-lockserver    don't compile lockserver],
[if test "$enable_lockserver" = yes; then
  AC_DEFINE(LOCKSERVER_SUPPORT,[],[Support CVS lock server])
fi],
[if test "$ac_cv_search_connect" != no; then
  AC_DEFINE(LOCKSERVER_SUPPORT,[],[Support CVS lock server])
  enable_server="yes"
fi])
AC_MSG_RESULT($enable_lockserver)
AM_CONDITIONAL(WITH_LOCKSERVER, test "$enable_lockserver" = "yes")

AC_MSG_CHECKING(support for pserver protocol)
AC_ARG_ENABLE(pserver,
[  --enable-pserver        Enable :pserver: protocol (default)
  --disable-pserver       Disable :pserver: protocol],
  acx_pserver=$enableval,
[if test "$enable_client" = yes -o "$enable_server" = yes; then
  acx_pserver="yes"
else
  acx_pserver="no"
fi])
AM_CONDITIONAL(PSERVER_PROTOCOL_SUPPORT, test "$acx_pserver" = "yes")
AC_MSG_RESULT($acx_pserver)

AC_MSG_CHECKING(support for ext protocol)
AC_ARG_ENABLE(ext,
[  --enable-ext            Enable :ext: protocol (default)
  --disable-ext           Disable :ext: protocol],
  acx_ext=$enableval,
[if test "$enable_client" = yes; then
  acx_ext="yes"
else
  acx_ext="no"
fi])
AM_CONDITIONAL(EXT_PROTOCOL_SUPPORT, test "$acx_ext" = "yes")
AC_MSG_RESULT($acx_ext)

AC_MSG_CHECKING(support for fork protocol)
AC_ARG_ENABLE(fork,
[  --enable-fork           Enable :fork: protocol 
  --disable-fork          Disable :fork: protocol (default)],
  acx_fork=$enableval,
  acx_fork="no")
AM_CONDITIONAL(FORK_PROTOCOL_SUPPORT, test "$acx_fork" = "yes")
AC_MSG_RESULT($acx_fork)

AC_MSG_CHECKING(support for rsh server protocol)
AC_ARG_ENABLE(rsh,
[  --enable-rsh            Enable rsh :server: protocol (default)
  --disable-rsh           Disable rsh :server: protocol],
  acx_rsh=$enableval,
[if test "$enable_client" = yes; then
  acx_rsh="yes"
else
  acx_rsh="no"
fi])
AM_CONDITIONAL(SERVER_PROTOCOL_SUPPORT, test "$acx_rsh" = "yes")
AC_MSG_RESULT($acx_rsh)

AC_MSG_CHECKING(support for gserver protocol)
AC_ARG_ENABLE(gserver,
[  --enable-gserver        Enable :gserver: protocol (default)
  --disable-gserve        Disable :gserver: protocol],
  acx_gserver=$enableval,
[if test "$enable_client" = yes -o "$enable_server" = yes; then
  if test "$acx_gssapi_cv_gssapi" = yes; then
    acx_gserver="yes"
  else
    acx_gserver="no"
  fi
else
  acx_gserver="no" 
fi])
AM_CONDITIONAL(GSERVER_PROTOCOL_SUPPORT, test "$acx_gserver" = "yes")
AC_MSG_RESULT($acx_gserver)


AC_MSG_CHECKING(support for sserver protocol)
AC_ARG_ENABLE(sserver,
[  --enable-sserver        Enable :sserver: protocol (default)
  --disable-sserver       Disable :sserver: protocol],
  acx_sserver=$enableval,
[if test "$enable_client" = yes -o "$enable_server" = yes; then
  if test "$ac_cv_have_ssl" = yes; then
    acx_sserver="yes"
  else
    acx_sserver="no"
  fi
else
  acx_sserver="no" 
fi])
AM_CONDITIONAL(SSERVER_PROTOCOL_SUPPORT, test $acx_sserver = "yes")
AC_MSG_RESULT($acx_sserver)

AC_MSG_CHECKING(support for sspi protocol)
AC_ARG_ENABLE(sspi,
[  --enable-sspi           Enable :sspi: protocol (default)
  --disable-sspi          Disable :sspi: protocol],
  acx_sspi=$enableval,
[if test "$enable_client" = yes; then
  acx_sspi="yes"
else
  acx_sspi="no" 
fi])
AM_CONDITIONAL(SSPI_PROTOCOL_SUPPORT, test $acx_sspi = "yes")
AC_MSG_RESULT($acx_sspi)

AC_MSG_CHECKING(support for cvsgui protocol)
AC_ARG_ENABLE(cvsgui,
[  --enable-cvsgui         include support for cvsgui protocol (default)
  --disable-cvsgui        don't include cvsgui support],
[if test "$enable_cvsgui" = yes; then
  AC_DEFINE(CVSGUI_PIPE,[],[Support for CVSGUI protocol])
fi],
  enable_cvsgui="yes"
  AC_DEFINE(CVSGUI_PIPE))
AC_MSG_RESULT($enable_cvsgui)
AM_CONDITIONAL(WITH_CVSGUI, test "$enable_cvsgui" = "yes")

AC_MSG_CHECKING(whether to compile RCS tools)
AC_ARG_ENABLE(rcs,
[  --enable-rcs            Enable RCS compatibility tools (default)
  --disable-rcs           Disable RCS compatibility tools],
  acx_rcs=$enableval, acx_rcs="yes")
AM_CONDITIONAL(WITH_RCSTOOLS, test "$acx_rcs" = "yes")
AC_MSG_RESULT($acx_rcs)

test -f src/options.h && (
  AC_MSG_WARN(saving ./src/options.h in ./src/options.h-SAVED)
  AC_MSG_WARN(You may wish to check that local options have not been lost.)
  AC_MSG_WARN(Do not re-run ./configure or ./config.status until you have....)
  cp ./src/options.h ./src/options.h-SAVED
)

AC_CONFIG_FILES([protocols/ntlm/libntlm.pc protocols/ntlm/ntlm.h])

AC_OUTPUT([Makefile \
	  contrib/Makefile \
	  contrib/clmerge \
	  contrib/cln_hist \
	  contrib/commit_prep \
	  contrib/cvs_acls \
	  contrib/log \
	  contrib/log_accum \
	  contrib/mfpipe \
	  contrib/rcslock \
	  contrib/sccs2rcs \
	  diff/Makefile \
	  lib/Makefile \
	  cvsgui/Makefile \
	  man/Makefile \
	  src/Makefile \
	  windows-NT/Makefile \
	  protocols/Makefile \
	  protocols/ntlm/Makefile \
	  lockservice/Makefile \
	  zlib/Makefile \
	  rcs/Makefile],
	  [chmod +x \
	  contrib/clmerge \
	  contrib/cln_hist \
	  contrib/commit_prep \
	  contrib/cvs_acls \
	  contrib/log \
	  contrib/log_accum \
	  contrib/mfpipe \
	  contrib/rcslock \
	  contrib/sccs2rcs])
